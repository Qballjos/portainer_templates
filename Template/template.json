{
  "version": "2",
  "templates": [
 		{
			"type": 1,
			"categories": ["Utilities"],
			"title": "Firefox",
			"name": "Firefox",
			"note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/firefox/config</p>",
			"description": "[Firefox](https://www.mozilla.org/en-US/firefox/) Browser, also known as Mozilla Firefox or simply Firefox, is a free and open-source web browser developed by the Mozilla Foundation and its subsidiary, the Mozilla Corporation. Firefox uses the Gecko layout engine to render web pages, which implements current and anticipated web standards.",
			"platform": "linux",
			"logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/firefox-logo.png",
			"image": "linuxserver/firefox:latest",
			"env": [
				{
					"name": "PUID",
					"label": "PUID",
					"default": "1024",
					"description": "for GroupID"
				},
				{
					"name": "PGID",
					"label": "PGID",
					"default": "100",
					"description": "for UserID"
				},
				{
					"name": "TZ",
					"label": "TZ",
					"default": "Europe/Amsterdam",
					"description": "Specify a timezone to use for example Europe/Amsterdam"
				}
			],
			"ports": [
				"3000:3000/tcp"
			],
			"volumes": [
			{
				"container": "/config",
				"bind": "/volume1/docker/firefox/config"
			}
			],
			"restart_policy": "unless-stopped"
		},
	 	{
			"type": 1,
			"categories": ["Library Server"],
			"title": "Calibre",
			"name": "Calibre",
			"note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/calibre/config</p>",
			"description": "Calibre is a powerful and easy to use e-book manager. Users say it’s outstanding and a must-have. It’ll allow you to do nearly everything and it takes things a step beyond normal e-book software. It’s also completely free and open source and great for both casual users and computer experts.",
			"platform": "linux",
			"logo": "https://github.com/kovidgoyal/calibre/raw/master/resources/images/lt.png",
			"image": "linuxserver/calibre:latest",
			"env": [
				{
					"name": "PUID",
					"label": "PUID",
					"default": "1024",
					"description": "for GroupID"
				},
				{
					"name": "PGID",
					"label": "PGID",
					"default": "100",
					"description": "for UserID"
				},
				{
					"name": "TZ",
					"label": "TZ",
					"default": "Europe/Amsterdam",
					"description": "Specify a timezone to use for example Europe/Amsterdam"
				},
				{
					"name": "PASSWORD",
					"label": "PASSWORD",
					"default": "",
					"description": "Optionally set a password for the gui."
				},
				{
					"name": "CLI_ARGS",
					"label": "CLI_ARGS",
					"default": "",
					"description": "Optionally pass cli start arguments to calibre."
				}
			],
			"ports": [
				"8080:8080/tcp",
				"8081:8081/tcp"
			],
			"volumes": [
				{
					"container": "/config",
					"bind": "/volume1/docker/calibre/config"
				}
			],
			"restart_policy": "unless-stopped"
		},
		{
			"type": 1,
			"categories": ["Smart Home"],
			"title": "Habridge",
			"name": "Habridge",
			"note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/habridge/config</p>",
			"description": "Habridge emulates Philips Hue API to other home automation gateways such as an Amazon Echo/Dot Gen 1 (gen 2 has issues discovering ha-bridge) or other systems that support Philips Hue. The Bridge handles basic commands such as 'On', 'Off' and 'brightness' commands of the hue protocol. This bridge can control most devices that have a distinct API.In the cases of systems that require authorization and/or have APIs that cannot be handled in the current method, a module may need to be built. The Harmony Hub is such a module and so is the Nest module. The Bridge has helpers to build devices for the gateway for the Logitech Harmony Hub, Vera, Vera Lite or Vera Edge, Nest, Somfy Tahoma, Home Assistant, Domoticz, MQTT, HAL, Fibaro, HomeWizard, LIFX, OpenHAB, FHEM, Broadlink and the ability to proxy all of your real Hue bridges behind this bridge.This bridge was built to help put the Internet of Things together.For more information about how to use this software have a look at their Wiki [https://github.com/bwssytems/ha-bridge/wiki](https://github.com/bwssytems/ha-bridge/wiki)",
			"platform": "linux",
			"logo": "https://raw.githubusercontent.com/bwssytems/ha-bridge/master/src/main/resources/public/img/favicon.ico",
			"image": "linuxserver/habridge:latest",
			"env": [
				{
					"name": "PUID",
					"label": "PUID",
					"default": "1024",
					"description": "for GroupID"
				},
				{
					"name": "PGID",
					"label": "PGID",
					"default": "100",
					"description": "for UserID"
				},
				{
					"name": "SEC_KEY",
					"label": "SEC_KEY",
					"default": "<Your Key To Encrypt Security Data>",
					"description": "Key used to secure communication."
				},
				{
					"name": "TZ",
					"label": "TZ",
					"default": "Europe/Amsterdam",
					"description": "Specify a timezone to use for example Europe/Amsterdam"
				}
			],
			"ports": [
				"8080:8080/tcp",
				"50000:50000/tcp"
			],
			"volumes": [
				{
					"container": "/config",
					"bind": "/volume1/docker/habridge/config"
				}
			],
			"restart_policy": "unless-stopped"
		},  
	  	{
			"type": 1,
			"categories": ["Utilities"],
			"title": "Snipe-it",
			"name": "Snipe-it",
			"note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/snipe-it/config</p>",
			"description": "Snipe-it makes asset management easy. It was built by people solving real-world IT and asset management problems, and a solid UX has always been a top priority. Straightforward design and bulk actions mean getting things done faster.",
			"platform": "linux",
			"logo": "https://s3-us-west-2.amazonaws.com/linuxserver-docs/images/snipe-it-logo500x500.png",
			"image": "linuxserver/snipe-it:latest",
			"env": [
				{
					"name": "PUID",
					"label": "PUID",
					"default": "1024",
					"description": "for GroupID"
				},
				{
					"name": "PGID",
					"label": "PGID",
					"default": "100",
					"description": "for UserID"
				},
				{
					"name": "APP_URL",
					"label": "APP_URL",
					"default": "<hostname or ip>",
					"description": "Hostname or IP and port if applicable IE <ip or hostname>:8080"
				},
				{
					"name": "MYSQL_PORT_3306_TCP_ADDR",
					"label": "MYSQL_PORT_3306_TCP_ADDR",
					"default": "<mysql host>",
					"description": "Mysql hostname or IP to use"
				},
				{
					"name": "MYSQL_PORT_3306_TCP_PORT",
					"label": "MYSQL_PORT_3306_TCP_PORT",
					"default": "<mysql port>",
					"description": "Mysql port to use"
				},
				{
					"name": "MYSQL_DATABASE",
					"label": "MYSQL_DATABASE",
					"default": "<mysql database>",
					"description": "Mysql database to use"
				},
				{
					"name": "MYSQL_USER",
					"label": "MYSQL_USER",
					"default": "<mysql pass>",
					"description": "Mysql user to use"
				},
				{
					"name": "MYSQL_PASSWORD",
					"label": "MYSQL_PASSWORD",
					"default": "changeme",
					"description": "Mysql password to use"
				}
			],
			"ports": [
				"8080:80/tcp"
			],
			"volumes": [
				{
					"container": "/config",
					"bind": "/volume1/docker/snipe-it/config"
				}
			],
			"restart_policy": "unless-stopped"
		},
	  
	      {
      "categories": ["Utilities"],
      "description": "It is a self-hosted monitoring tool like Uptime Robot",
      "image": "louislam/uptime-kuma:latest",
      "logo": "https://images.opencollective.com/uptime-kuma/29c5113/logo/256.png",
      "name": "uptime-kuma",
      "platform": "linux",
      "ports": ["3001:3001/tcp"],
      "restart_policy": "always",
      "title": "Uptime Kuma",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/UptimeKuma",
          "container": "/app/data"
        }
      ]
    },
	  {
			"type": 1,
			"title": "Grafana",
			"description": "Metrics Graphing Tool",
			"logo": "https://github.com/grafana/grafana/blob/master/docs/logo-swirl.svg",
			"platform": "linux",
			"restart_policy": "unless-stopped",
			"categories": [
				"Dashboard Server"
			],
			"image": "grafana/grafana:latest",
			"ports": [
				"3000/tcp"
			],
			"network": "bridge",
			"volumes": [
				{
					"container": "/etc/grafana/grafana.ini"
				},
				{
					"container": "/var/lib/grafana"
				},
				{
					"container": "/var/log/grafana"
				}
			]
		},
	  
	     {
      "categories": ["Smart Home"],
      "description": "Node-RED provides a browser-based flow editor that makes it easy to wire together flows using the wide range of nodes in the palette.",
      "image": "nodered/node-red",
      "logo": "https://raw.githubusercontent.com/xneo1/portainer_templates/master/Images/node-red-icon.svg",
      "name": "nodered",
      "platform": "linux",
      "ports": ["1880:1880/tcp"],
      "restart_policy": "always",
      "title": "Nodered",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Nodered",
          "container": "/data"
        }
      ]
    }, 
	  {
			"categories": [
				"Utilities"
			],
			"description": "draw.io (formerly Diagramly) is free online diagram software. You can use it as a flowchart maker, network diagram software, to create UML online, as an ER diagram tool, to design database schema, to build BPMN online, as a circuit diagram maker, and more. draw.io can import .vsdx, Gliffy™ and Lucidchart™ files.",
			"image": "jgraph/drawio:latest",
			"logo": "https://raw.githubusercontent.com/qwerty00007/portainer_templates/master/Images/draw.io.png",
			"name": "draw.io",
			"platform": "linux",
			"ports": [
				"8080:8080/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "draw.io",
			"type": 1
		},
	     {
      "categories": ["Dashboard Server"],
      "description": "Helps you organize your self-hosted services by making them accessible from a single place.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "1000",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "PORT",
          "name": "PORT"
        }
      ],
      "logo": "https://dashy.to/img/dashy.png",
      "name": "Dashy",
      "platform": "linux",
      "repository": {
        "stackfile": "Template/Stack/dashy.yml",
        "url": "https://github.com/xneo1/portainer_templates"
      },
      "title": "Dashy",
      "type": 3
    },  
    {
      "categories": ["Music Server"],
      "description": "Navidrome is an open source web-based music collection server and streamer. It gives you freedom to listen to your music collection from any browser or mobile device. It's like your personal Spotify!",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "1000",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "PORT",
          "name": "PORT"
        }
      ],
      "logo": "https://github.com/navidrome/navidrome/raw/master/resources/logo-192x192.png",
      "name": "Navidrome",
      "platform": "linux",
      "repository": {
        "stackfile": "Template/Stack/navidrome.yml",
        "url": "https://github.com/xneo1/portainer_templates"
      },
      "title": "Navidrome",
      "type": 3
    },    
    {
      "categories": ["Dashboard Server"],
      "description": "Flame is self-hosted startpage for your server. Its design is inspired (heavily) by SUI. Flame is very easy to setup and use. With built-in editors, it allows you to setup your very own application hub in no time - no file editing necessary.",
      "image": "pawelmalak/flame",
      "logo": "https://raw.githubusercontent.com/xneo1/portainer_templates/master/Images/flame.png",
      "name": "flame-dashboard",
      "platform": "linux",
      "ports": ["5005:5005/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Flame-Dashboard",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/flame-dashboard",
          "container": "/app/data"
        }
      ]
    },	  
	  		{
			"type": 1,
			"categories": ["Tools"],
			"title": "Foldingathome",
			"name": "Foldingathome",
			"note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/foldingathome/config</p>",
			"description": "[Folding@home](https://foldingathome.org/) is a distributed computing project for simulating protein dynamics, including the process of protein folding and the movements of proteins implicated in a variety of diseases. It brings together citizen scientists who volunteer to run simulations of protein dynamics on their personal computers. Insights from this data are helping scientists to better understand biology, and providing new opportunities for developing therapeutics.",
			"platform": "linux",
			"logo": "https://foldingathome.org/wp-content/uploads/2016/09/folding-at-home-logo.png",
			"image": "linuxserver/foldingathome:latest",
			"env": [
				{
					"name": "PUID",
					"label": "PUID",
					"default": "1024",
					"description": "for GroupID"
				},
				{
					"name": "PGID",
					"label": "PGID",
					"default": "100",
					"description": "for UserID"
				},
				{
					"name": "TZ",
					"label": "TZ",
					"default": "Europe/Amsterdam",
					"description": "Specify a timezone to use for example Europe/Amsterdam"
				}
			],
			"ports": [
				"7396:7396/tcp",
				"36330:36330/tcp"
			],
			"volumes": [
			{
				"container": "/config",
				"bind": "/volume1/docker/foldingathome/config"
			}
			],
			"restart_policy": "unless-stopped"
		},
    
    {
      "categories": ["Music Server"],
      "description": "Airsonic is a free, web-based media streamer, providing ubiqutious access to your music. Use it to share your music with friends, or to listen to your own music while at work. You can stream to multiple players simultaneously, for instance to one player in your kitchen and another in your living room.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "CONTEXT_PATH",
          "name": "CONTEXT_PATH",
          "set": "airsonic"
        },
        {
          "label": "JAVA_OPTS",
          "name": "JAVA_OPTS",
          "set": "-Xms256m -Xmx512m"
        }
      ],
      "image": "linuxserver/airsonic:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/airsonic-logo.png",
      "name": "airsonic",
      "platform": "linux",
      "ports": ["4040:4040/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Airsonic",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Music",
          "container": "/music"
        },
        {
          "bind": "/portainer/Files/AppData/Airsonic/Playlists",
          "container": "/playlists"
        },
        {
          "bind": "/portainer/Podcasts",
          "container": "/podcasts"
        },
        {
          "bind": "/portainer/Files/AppData/Airsonic/Media",
          "container": "/media"
        },
        {
          "bind": "/portainer/Files/AppData/Config/Airsonic/",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Authentication"],
      "description": "An open-source authentication and authorization server providing 2-factor authentication and single sign-on (SSO) for your applications via a web portal.",
      "env": [
        {
          "label": "TZ",
          "name": "TZ"
        }
      ],
      "image": "authelia/authelia:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/authelia.png",
      "name": "authelia",
      "note": "Requires a configuration.yml file in order to work. Documentation is available <a href='https://docs.authelia.com/deployment/deployment-ha'>here</a>.",
      "platform": "linux",
      "ports": ["9091:9091/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Authelia",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Authelia",
          "container": "/etc/authelia/"
        }
      ]
    },
    {
      "categories": ["Usenet Server"],
      "description": "Bazarr is a companion application to Sonarr and Radarr. It can manage and download subtitles based on your requirements. You define your preferences by TV show or movie and Bazarr takes care of everything for you.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "TZ",
          "name": "TZ"
        }
      ],
      "image": "hotio/bazarr:release",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/bazarr.png",
      "name": "Bazarr",
      "platform": "linux",
      "ports": ["6767:6767/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Bazarr",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Bazarr",
          "container": "/config"
        },
        {
          "bind": "/portainer/TV",
          "container": "/tv"
        },
        {
          "bind": "/portainer/Movies",
          "container": "/movies"
        }
      ]
    },
    {
      "categories": ["Music Server"],
      "description": "The purpose of beets is to get your music collection right once and for all. It catalogs your collection, automatically improving its metadata as it goes using the MusicBrainz database. Then it provides a bouquet of tools for manipulating and accessing your music.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/beets:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/beets-icon.png",
      "name": "beets",
      "platform": "linux",
      "ports": ["8337:8337/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Beets",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Beets",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        },
        {
          "bind": "/portainer/Music",
          "container": "/music"
        }
      ]
    },
    {
      "categories": ["Password Server"],
      "description": "This is a Bitwarden server API implementation written in Rust compatible with upstream Bitwarden clients*, perfect for self-hosted deployment where running the official resource-heavy service might not be ideal.",
      "image": "vaultwarden/server:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/bitwarden.png",
      "name": "vaultwarden",
      "note": "This project is not associated with the Bitwarden project nor 8bit Solutions LLC.",
      "platform": "linux",
      "ports": [":80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Vaultwarden",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Vaultwarden",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Library Server"],
      "description": "Booksonic is a server and an app for streaming your audiobooks to any pc or android phone. Most of the functionality is also availiable on other platforms that have apps for subsonic.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "default": "booksonic",
          "label": "CONTEXT_PATH",
          "name": "CONTEXT_PATH"
        }
      ],
      "image": "linuxserver/booksonic:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/booksonic.png",
      "name": "booksonic",
      "platform": "linux",
      "ports": ["4040:4040/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Booksonic",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Books",
          "container": "/books"
        },
        {
          "bind": "/portainer/Files/Podcasts",
          "container": "/podcast"
        },
        {
          "bind": "/portainer/Files/AppData/Config/Booksonic",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Notes Server"],
      "description": "Bookstack is a free and open source Wiki designed for creating beautiful documentation. Feautring a simple, but powerful WYSIWYG editor it allows for teams to create detailed and useful documentation with ease.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "TZ",
          "name": "TZ"
        },
        {
          "label": "DATABASE_PASSWORD",
          "name": "DATABASE_PASSWORD"
        },
        {
          "label": "MYSQL_ROOT_PASSWORD",
          "name": "MYSQL_ROOT_PASSWORD"
        },
        {
          "label": "PORT",
          "name": "PORT"
        }
      ],
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/bookstack2.png",
      "note": "Default login is admin@admin.com with a password of password. The database created is called bookstackapp and the database user is called bookstack",
      "platform": "linux",
      "repository": {
        "stackfile": "Template/Stack/bookstack.yml",
        "url": "https://github.com/Qballjos/portainer_templates"
      },
      "title": "Bookstack",
      "type": 3
    },
    {
      "categories": ["Library Server"],
      "description": "COPS links to your Calibre library database and allows downloading and emailing of books directly from a web browser and provides a OPDS feed to connect to your devices.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/cops:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/cops-icon.png",
      "name": "cops",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "COPS",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Books",
          "container": "/books"
        },
        {
          "bind": "/portainer/Files/AppData/Config/Cops",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Library Server"],
      "description": "Calibre Web is a web app providing a clean interface for browsing, reading and downloading eBooks using an existing Calibre database.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/calibre-web:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/calibre-web-icon.png",
      "name": "calibre-web",
      "note": "Configuration <ul><li><b>/config</b> - Where Calibre-web should store it's database</li><li><b>/books</b> - Path to your calibre library metadata.db file</li></ul>",
      "platform": "linux",
      "ports": ["8083:8083/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Calibre Web",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Books",
          "container": "/books"
        },
        {
          "bind": "/portainer/Files/AppData/Config/Calibre-web",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Photos"],
      "description": "Chevereto is a powerful and fast image hosting script that allows you to create your very own full featured image hosting website in just minutes. Please note that this offers only the free Chevereto version.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "CHEVERETO_DB_HOST",
          "name": "CHEVERETO_DB_HOST",
          "set": ""
        },
        {
          "label": "CHEVERETO_DB_USERNAME",
          "name": "CHEVERETO_DB_USERNAME",
          "set": ""
        },
        {
          "label": "CHEVERETO_DB_PASSWORD",
          "name": "CHEVERETO_DB_PASSWORD",
          "set": ""
        },
        {
          "label": "CHEVERETO_DB_NAME",
          "name": "CHEVERETO_DB_NAME",
          "set": ""
        },
        {
          "label": "CHEVERETO_DB_PREFIX",
          "name": "CHEVERETO_DB_PREFIX",
          "set": ""
        }
      ],
      "image": "nmtan/chevereto:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/Chevereto.png",
      "name": "Chevereto",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Chevereto",
      "type": 1,
      "volumes": [
        {
          "container": "/var/www/html/images"
        }
      ]
    },
    {
      "categories": ["Family App Server"],
      "description": "ave recipes in seconds with plain text formatting and create beatiful recipe pages with automated ease.",
      "image": "gregyankovoy/chowdown:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/chowdown.png",
      "name": "Chowdown",
      "platform": "linux",
      "ports": ["4000:4000/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Chowdown",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Chowdown",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Code Server"],
      "description": "Code-server is VS Code running on a remote server, accessible through the browser.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "1000",
          "label": "PUID",
          "name": "GUID"
        },
        {
          "label": "TZ",
          "name": "TZ"
        },
        {
          "label": "PASSWORD",
          "name": "PASSWORD"
        },
        {
          "label": "SUDO_PASSWORD",
          "name": "SUDO_PASSWORD"
        },
        {
          "default": "example.my.domain",
          "label": "PROXY_DOMAIN",
          "name": "PROXY_DOMAIN"
        }
      ],
      "image": "linuxserver/code-server:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/code-server.png",
      "name": "code-server",
      "platform": "linux",
      "ports": ["8443:8443/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Code Server",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Code-Server",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Code Server"],
      "description": "Codiad is a web-based IDE framework with a small footprint and minimal requirements.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/codiad:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/codiad-icon.png",
      "name": "codiad",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Codiad",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Codiad",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Usenet Server"],
      "description": "CouchPotato (CP) is an automatic NZB and torrent downloader. You can keep a \"movies I want\"-list and it will search for NZBs/torrents of these movies every X hours. Once a movie is found, it will send it to SABnzbd or download the torrent to a specified directory.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/couchpotato:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/couchpotato-icon.png",
      "name": "couchpotato",
      "platform": "linux",
      "ports": ["5050:5050/tcp"],
      "restart_policy": "unless-stopped",
      "title": "CouchPotato",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Couchpotato",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        },
        {
          "bind": "/portainer/Movies",
          "container": "/movies"
        }
      ]
    },
    {
      "categories": ["Music Server"],
      "description": "DAAP (iTunes) media server with support for AirPlay devices, Apple Remote (and compatibles), MPD and internet radio.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/daapd:latest",
      "logo": "https://raw.githubusercontent.com/linuxserver/beta-templates/master/lsiodev/img/daapd-icon.png",
      "name": "daapd",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "Daapd",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Daapd",
          "container": "/config"
        },
        {
          "bind": "/portainer/Music",
          "container": "/music"
        }
      ]
    },
    {
      "categories": ["Dashboard Server"],
      "description": "Another application bookmark dashboard, with fun features.",
      "image": "rmountjoy/dashmachine:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/dashmachine_logo.png",
      "name": "dashmachine",
      "platform": "linux",
      "ports": ["5000:5000/tcp"],
      "restart_policy": "unless-stopped",
      "title": "DashMachine",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Dashmachine",
          "container": "/dashmachine/dashmachine/user_data"
        }
      ]
    },
    {
      "categories": ["FTP Server"],
      "description": "davos is an FTP automation tool that periodically scans given host locations for new files. It can be configured for various purposes, including listening for specific files to appear in the host location, ready for it to download and then move, if required. It also supports completion notifications as well as downstream API calls, to further the workflow.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/davos:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/davos.png",
      "name": "davos",
      "note": "Configuration <ul><li><b>/config</b> - AppData Location</li><li><b>/downloads</b> - File Download Location</li></ul>",
      "platform": "linux",
      "ports": ["8080/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Davos",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Davos",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        }
      ]
    },
    {
      "categories": ["Torrent Server"],
      "description": "Deluge is a lightweight, Free Software, cross-platform BitTorrent client providing: Full Encryption, WebUI, Plugin System, Much more...",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "UMASK_SET",
          "name": "UMASK_SET",
          "set": "000"
        }
      ],
      "image": "linuxserver/deluge:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/deluge-icon.png",
      "name": "deluge",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "Deluge",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Deluge",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        }
      ]
    },
    {
      "categories": ["Smart Home"],
      "description": "Domoticz is a Home Automation System that lets you monitor and configure various devices like: Lights, Switches, various sensors/meters like Temperature, Rain, Wind, UV, Electra, Gas, Water and much more. Notifications/Alerts can be sent to any mobile device.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/domoticz:latest",
      "logo": "https://github.com/domoticz/domoticz/raw/master/www/images/logo.png",
      "name": "domoticz",
      "platform": "linux",
      "ports": ["1443:1443/tcp", "6144:6144/tcp", "8080:8080/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Domoticz",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Domoticz",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["DNS"],
      "description": "Duck DNS is a free service which will point a DNS (sub domains of duckdns.org) to an IP of your choice. The service is completely free, and doesn't require reactivation or forum posts to maintain its existence.",
      "env": [
        {
          "label": "SUBDOMAINS",
          "name": "SUBDOMAINS",
          "set": ""
        },
        {
          "label": "TOKEN",
          "name": "TOKEN",
          "set": ""
        },
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/duckdns:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/duckdns.png",
      "name": "duckdns",
      "note": "<b>Configuration</b></br>First, go to duckdns site, register your subdomain and retrieve your token<br/>Then run the docker create command above with your subdomain(s) and token<br/>It will update your IP with the DuckDNS service every 5 minutes",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "Duck DNS",
      "type": 1
    },
    {
      "categories": ["Backup Server"],
      "description": "Free backup software to store encrypted backups online, Duplicati works with standard protocols like FTP, SSH, WebDAV as well as popular services like Microsoft OneDrive, Amazon Cloud Drive and S3, Google Drive, box.com, Mega, hubiC and many others.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/duplicati:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/duplicati-icon.png",
      "name": "duplicati",
      "platform": "linux",
      "ports": ["8200:8200/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Duplicati",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Duplicati",
          "container": "/config"
        },
        {
          "container": "/tmp"
        },
        {
          "container": "/backups"
        },
        {
          "container": "/source"
        }
      ]
    },
    {
      "categories": ["Media Server"],
      "description": "Emby organizes video, music, live TV, and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices. This container is packaged as a standalone emby Media Server.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "TZ",
          "name": "TZ"
        }
      ],
      "image": "linuxserver/emby:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/emby.png",
      "name": "Emby",
      "platform": "linux",
      "ports": ["8096:8096/tcp", "8920:8920/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Emby",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Emby",
          "container": "/config"
        },
        {
          "bind": "/portainer/TV",
          "container": "/data/tvshows"
        },
        {
          "bind": "/portainer/Movies",
          "container": "/data/movies"
        }
      ]
    },
    {
      "categories": ["Media Server"],
      "description": "Embystat is a personal web server that can calculate all kinds of statistics from your (local) Emby server. Just install this on your server and let him calculate all kinds of fun stuff.",
      "image": "linuxserver/embystat:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/embystat.png",
      "name": "EmbyStat",
      "note": "Access the ui at your-ip:6555. Follow the setup wizard on initial install. Then configure the required services.",
      "platform": "linux",
      "ports": ["6555:6555/tcp"],
      "restart_policy": "unless-stopped",
      "title": "EmbyStat",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/EmbyStat",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Utilities"],
      "description": "Web File Browser which can be used as a middleware or standalone app.",
      "image": "80x86/filebrowser:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/filebrowser.png",
      "name": "filebrowser",
      "note": "The default user and password is admin/admin.",
      "platform": "linux",
      "ports": ["8082:8082/tcp"],
      "restart_policy": "unless-stopped",
      "title": "FileBrowser",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/FileBrowser",
          "container": "/config"
        },
        {
          "bind": "/portainer/Files/AppData/Config",
          "container": "/myfiles"
        }
      ]
    },
    {
      "categories": ["Smart Home"],
      "description": "A free, self-hostable rss aggregator.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/freshrss:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/freshrss-icon.png",
      "name": "freshrss",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "FreshRSS",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/freshrss",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Library Server"],
      "description": "A WebApp Comic Reader for your favorite digital comics. Reach and read your comic library from any web connected device with a modern web browser.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/gazee:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/gazee-logo.png",
      "name": "gazee",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "Gazee",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Gazee",
          "container": "/config"
        },
        {
          "bind": "/portainer/Comics",
          "container": "/comics"
        },
        {
          "bind": "/portainer/Files/AppData/Gazee",
          "container": "/mylar"
        }
      ]
    },
    {
      "categories": ["Utilities"],
      "description": "A clientless remote desktop gateway.",
      "image": "oznu/guacamole:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/guacamole.png",
      "name": "guacamole",
      "note": "The default login will be guacadmin/guacadmin. It is common practice to add a new admin user and remove the default user for Guacamole.",
      "platform": "linux",
      "ports": ["8080:8080/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Guacamole",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Guacamole",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Family App Server"],
      "description": "Grocy is an ERP system for your kitchen! Cut down on food waste, and manage your chores with this brilliant utility.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "Timezone",
          "name": "TZ"
        }
      ],
      "image": "linuxserver/grocy:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/grocy_logo.png",
      "name": "grocy",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Grocy",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Grocy",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Usenet Server"],
      "description": "Headphones is an automated music downloader for NZB and Torrent, written in Python. It supports SABnzbd, NZBget, Transmission, µTorrent and Blackhole.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/headphones:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/headphones-icon.png",
      "name": "headphones",
      "platform": "linux",
      "ports": ["8181:8181/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Headphones",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Headphones",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/Downloads"
        },
        {
          "bind": "/portainer/Music",
          "container": "/music"
        }
      ]
    },
    {
      "categories": ["Dashboard Server"],
      "description": "Heimdall is a way to organise all those links to your most used web sites and web applications in a simple way.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/heimdall:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/heimdall-icon.png",
      "name": "heimdall",
      "platform": "linux",
      "ports": ["80/tcp", "443/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Heimdall",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Heimdall",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Dashboard Server"],
      "description": "A dead simple static HOMepage for your servER to keep your s ervices on hand, from a simple yaml configuration file.",
      "image": "b4bz/homer:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/homer.png",
      "name": "homer",
      "note": "This container requires a yml file within the config volume. See the documentation here https://github.com/bastienwirtz/homer",
      "platform": "linux",
      "ports": ["8902:8080/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Homer",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Homer/assets",
          "container": "/www/assets"
        },
        {
          "bind": "/portainer/Files/AppData/Config/Homer",
          "container": "/www/config.yml"
        }
      ]
    },
    {
      "categories": ["Tools"],
      "description": "Create agents that monitor and act on your behalf.",
      "image": "huginn/huginn:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/huginn.png",
      "name": "huginn",
      "platform": "linux",
      "ports": ["3000:3000/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Huginn",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/huginn",
          "container": "/var/lib/mysql"
        }
      ]
    },
    {
      "categories": ["Proxy Server"],
      "description": "Jackett works as a proxy server it translates queries from apps like Sonarr etc into tracker-site-specific http queries and parses the html response sending results back to the requesting software.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/jackett:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/jacket-icon.png",
      "name": "jackett",
      "platform": "linux",
      "ports": ["9117:9117/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Jackett",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Jackett",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        }
      ]
    },
    {
      "categories": ["Media Server"],
      "description": "Jellyfin is a Free Software Media System that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, to provide media from a dedicated server to end-user devices via multiple apps.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "TZ",
          "name": "TZ"
        }
      ],
      "image": "linuxserver/jellyfin:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/jellyfin.png",
      "name": "jellyfin",
      "platform": "linux",
      "ports": ["8096:8096/tcp", "8920:8920/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Jellyfin",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Jellyfin",
          "container": "/config"
        },
        {
          "bind": "/portainer/TV",
          "container": "/data/tvshows"
        },
        {
          "bind": "/portainer/Movies",
          "container": "/data/movies"
        }
      ]
    },
    {
      "categories": ["Media Server"],
      "description": "Headless installation of Kodi™ (formerly known as XBMC™), to enable library updates.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/kodi-headless:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/kodi-icon.png",
      "name": "kodi-headless",
      "platform": "linux",
      "ports": ["8080/tcp", "9777/udp"],
      "restart_policy": "unless-stopped",
      "title": "Kodi Headless",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Kodi",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Library Server"],
      "description": "LazyLibrarian is a program to follow authors and grab metadata for all your digital reading needs.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/lazylibrarian:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/lazylibrarian-icon.png",
      "name": "lazylibrarian",
      "platform": "linux",
      "ports": ["5299:5299/tcp"],
      "restart_policy": "unless-stopped",
      "title": "LazyLibrarian",
      "type": 1,
      "volumes": [
        {
          "container": "/config"
        },
        {
          "container": "/downloads"
        },
        {
          "container": "/books"
        }
      ]
    },
    {
      "categories": ["Proxy Server"],
      "description": "This container sets up an Nginx webserver and reverse proxy with php support and a built-in letsencrypt client that automates free SSL server certificate generation and renewal processes. It also contains fail2ban for intrusion prevention.",
      "env": [
        {
          "label": "EMAIL",
          "name": "EMAIL",
          "set": "-Xms256m -Xmx512m"
        },
        {
          "label": "URL",
          "name": "URL",
          "set": "-Xms256m -Xmx512m"
        },
        {
          "label": "SUBDOMAINS",
          "name": "SUBDOMAINS",
          "set": "www,"
        },
        {
          "label": "ONLY_SUBDOMAINS",
          "name": "ONLY_SUBDOMAINS",
          "set": "false"
        },
        {
          "label": "DHLEVEL",
          "name": "DHLEVEL",
          "set": "2048"
        },
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "VALIDATION",
          "name": "VALIDATION",
          "set": "http"
        },
        {
          "label": "DNSPLUGIN",
          "name": "DNSPLUGIN",
          "set": "http"
        }
      ],
      "image": "linuxserver/swag:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/letsencrypt.png",
      "name": "letsencrypt / SWAG",
      "note": "Before running this container, make sure that the url and subdomains are properly forwarded to this container's host.<ul><li>- Port 443 on the internet side of the router should be forwarded to this container's port 443.</li><li>- If you need a dynamic dns provider, you can use the free provider duckdns.org where the url will be yoursubdomain.duckdns.org and the subdomains can be www,ftp,cloud</li><li>- The container detects changes to url and subdomains, revokes existing certs and generates new ones during start.</li><li>- It also detects changes to the DHLEVEL parameter and replaces the dhparams file.</li><li>- If you'd like to password protect your sites, you can use htpasswd. Run the following command on your host to generate the htpasswd file <code>docker exec -it letsencrypt htpasswd -c /config/nginx/.htpasswd \u0026lt;username\u0026gt;</code>",
      "platform": "linux",
      "ports": ["80/tcp", "443/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Let's Encrypt / SWAG",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/LetsEncrypt",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Tools"],
      "description": "A Free and Open Source Speedtest for HTML5 and more.",
      "image": "linuxserver/librespeed:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/speedtest.png",
      "name": "librespeed",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "LibreSpeed",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/LibreSpeed",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Usenet Server"],
      "description": "Lidarr is a music collection manager for Usenet and BitTorrent users.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "hotio/lidarr:release",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/lidarr.png",
      "name": "lidarr",
      "platform": "linux",
      "ports": ["8686:8686/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Lidarr",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Lidarr",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        },
        {
          "bind": "/portainer/Music",
          "container": "/music"
        }
      ]
    },
    {
      "categories": ["Photos"],
      "description": "Lychee is a free photo-management tool, which runs on your server or web-space. Installing is a matter of seconds. Upload, manage and share photos like from a native application. Lychee comes with everything you need and all your photos are stored securely.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/lychee:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/lychee-icon.png",
      "name": "lychee",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Lychee",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Lychee",
          "container": "/config"
        },
        {
          "bind": "/portainer/Pictures",
          "container": "/pictures"
        }
      ]
    },
    {
      "categories": ["Tools"],
      "description": "An Enhanced drop in replacement for Mysql.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "MYSQL_ROOT_PASSWORD",
          "name": "MYSQL_ROOT_PASSWORD",
          "set": ""
        }
      ],
      "image": "linuxserver/mariadb:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/mariadb-icon.png",
      "name": "mariadb",
      "platform": "linux",
      "ports": ["3306:3306/tcp"],
      "restart_policy": "unless-stopped",
      "title": "MariaDB",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Mariadb",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Music Server"],
      "description": "Mstream is a personal music streaming server. You can use mStream to stream your music from your home computer to any device, anywhere. There are mobile apps available for both Android and iPhone.",
      "image": "linuxserver/mstream:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/mstream.png",
      "name": "mstream",
      "platform": "linux",
      "ports": ["3000:3000/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Mstream",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Mstream",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/music"
        }
      ]
    },
    {
      "categories": ["Chat Server"],
      "description": "Mumble is a voicechat program for gamers written on top of Qt and Opus. Murmur is the server backend for Mumble.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "TZ",
          "name": "TZ"
        }
      ],
      "image": "goofball222/murmur:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/Mumble-logo.png",
      "name": "murmur",
      "platform": "linux",
      "ports": ["64738:64738/tcp", "64738:64738/udp"],
      "restart_policy": "unless-stopped",
      "title": "Murmur",
      "type": 1,
      "volumes": [
        {
          "bind": "/etc/localtime:ro",
          "container": "/etc/localtime"
        },
        {
          "bind": "/portainer/Files/Config/Murmur",
          "container": "/opt/murmur/config"
        },
        {
          "bind": "/portainer/Files/Murmur/data",
          "container": "/opt/murmur/data"
        },
        {
          "bind": "/portainer/Files/Murmur/log",
          "container": "/opt/murmur/log"
        }
      ]
    },
    {
      "categories": ["Music Server"],
      "description": "MusicBrainz is an open music encyclopedia that collects music metadata and makes it available to the public.",
      "env": [
        {
          "label": "BRAINZCODE",
          "name": "BRAINZCODE",
          "set": ""
        },
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/musicbrainz:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/musicbrainz-icon.png",
      "name": "musicbrainz",
      "platform": "linux",
      "ports": ["5000:5000/tcp"],
      "restart_policy": "unless-stopped",
      "title": "MusicBrainz",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/MusicBrainz",
          "container": "/config"
        },
        {
          "bind": "/portainer/Files/AppData/MusicBrainz",
          "container": "/data"
        }
      ]
    },
    {
      "categories": ["Dashboard Server"],
      "description": "A lightweight portal to view, manage your HTPC apps without having to run anything more than a PHP enabled webserver. With Muximux you don't need to keep multiple tabs open, or bookmark the URL to all of your apps.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/muximux:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/muximux-icon.png",
      "name": "muximux",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Muximux",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Muximux",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Usenet Server"],
      "description": "An automated Comic Book downloader (cbr/cbz) for use with SABnzbd, NZBGet and torrents.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/mylar:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/mylar-icon.png",
      "name": "mylar",
      "platform": "linux",
      "ports": ["8090:8090/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Mylar",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Mylar",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        },
        {
          "bind": "/portainer/Comics",
          "container": "/comics"
        }
      ]
    },
    {
      "categories": ["Usenet Server"],
      "description": "NZBGet is a usenet downloader, written in C++ and designed with performance in mind to achieve maximum download speed by using very little system resources. It supports all platforms including Windows, Mac, Linux and works on all devices including PC, NAS, WLAN routers and media players.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/nzbget:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/nzbget-icon.png",
      "name": "nzbget",
      "platform": "linux",
      "ports": ["6789:6789/tcp"],
      "restart_policy": "unless-stopped",
      "title": "NZBGet",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Nzbget",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        }
      ]
    },
    {
      "categories": ["Proxy Server"],
      "description": "NZBHydra is a meta search for NZB indexers and the \"spiritual successor\" to NZBmegasearcH. It provides easy access to a number of raw and newznab based indexers.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/nzbhydra2:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/hydra-icon.png",
      "name": "nzbhydra2",
      "platform": "linux",
      "ports": ["5076:5076/tcp"],
      "restart_policy": "unless-stopped",
      "title": "NZBHydra 2",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Nzbhydra2",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        }
      ]
    },
    {
      "categories": ["Family App Server"],
      "description": "Where are your photos and documents? With Nextcloud you pick a server of your choice, at home, in a data center or at a provider. And that is where your files will be. Nextcloud runs on that server, protecting your data and giving you access from your desktop or mobile devices.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "TZ",
          "name": "TZ"
        },
        {
          "label": "DATABASE_PASSWORD",
          "name": "DATABASE_PASSWORD"
        },
        {
          "label": "MYSQL_ROOT_PASSWORD",
          "name": "MYSQL_ROOT_PASSWORD"
        },
        {
          "label": "PORT",
          "name": "PORT"
        }
      ],
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/nextcloud-icon.png",
      "name": "nextcloud",
      "note": "The database user is nextcloud and the database is nextcloud_db. The host of the database will be located at the bottom of the DB conotainer in portainer.",
      "platform": "linux",
      "repository": {
        "stackfile": "Template/Stack/nextcloud.yml",
        "url": "https://github.com/Qballjos/portainer_templates"
      },
      "title": "Nextcloud",
      "type": 3
    },
    {
      "categories": ["Proxy Server"],
      "description": "Nginx is a web server with a strong focus on high concurrency, performance and low memory usage. It can also act as a reverse proxy server for HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer and an HTTP cache.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/nginx:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/nginx-icon.png",
      "name": "nginx",
      "platform": "linux",
      "ports": ["80/tcp", "443/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Nginx",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Nginx",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Proxy Server"],
      "description": "Nginx Proxy Manager enables you to easily forward to your websites running at home or otherwise, including free SSL, without having to know too much about Nginx or Letsencrypt.",
      "image": "jc21/nginx-proxy-manager",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/proxy_mgr.png",
      "name": "nginx-proxy-manager",
      "platform": "linux",
      "env": [
        {
          "label": "DB_SQLITE_FILE",
          "name": "DB_SQLITE_FILE",
          "default": "/data/database.sqlite"
        }
      ],
      "ports": ["80:80/tcp", "81:81/tcp", "443:443/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Nginx Proxy Manager",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Nginx-Proxy/data",
          "container": "/data"
        },
        {
          "bind": "/portainer/Files/AppData/Config/Nginx-Proxy/letsencrypt",
          "container": "/etc/letsencrypt"
        }
      ]
    },
    {
      "categories": ["Media Server"],
      "description": "Ombi allows you to host your own Plex Request and user management system.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/ombi:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/ombi.png",
      "name": "ombi",
      "platform": "linux",
      "ports": ["3579:3579/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Ombi",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Ombi",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["VPN Server"],
      "description": "OpenVPN Access Server is a full featured secure network tunneling VPN software solution that integrates OpenVPN server capabilities, enterprise management capabilities, simplified OpenVPN Connect UI, and OpenVPN Client software packages that accommodate Windows, MAC, Linux, Android, and iOS environments.",
      "env": [
        {
          "label": "INTERFACE",
          "name": "INTERFACE",
          "set": "eth0"
        },
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/openvpn-as:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/openvpn-as-icon.png",
      "name": "openvpn-as",
      "platform": "linux",
      "ports": ["943:943/tcp", "9443:9443/tcp", "1194:1194/udp"],
      "restart_policy": "unless-stopped",
      "title": "OpenVPN Access Server",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/OpenVPN-AS",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Dashboard Server"],
      "description": "Organizr allows you to setup Tabs that will be loaded all in one webpage. You can then work on your server with ease.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "organizr/organizr:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/organizr-icon.png",
      "name": "organizr-v2",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Organizr",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Organizr",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Media Server"],
      "description": "Overseerr is a free and open source software application for managing requests for your media library.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "hotio/overseerr:release",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/overseerr-icon.png",
      "name": "Overseerr",
      "platform": "linux",
      "ports": ["5055:5055/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Overseerr",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Overseerr",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Family App Server"],
      "description": "ownCloud is a self-hosted file sync and share server. It provides access to your data through a web interface, sync clients or WebDAV while providing a platform to view, sync and share across devices easily—all under your control. ownCloud’s open architecture is extensible via a simple but powerful API for applications and plugins and it works with any storage.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "TZ",
          "name": "TZ"
        },
        {
          "label": "OWNCLOUD_DOMAIN",
          "name": "OWNCLOUD_DOMAIN"
        },
        {
          "label": "DB_PASSWORD",
          "name": "DB_PASSWORD"
        },
        {
          "label": "ADMIN_USERNAME",
          "name": "ADMIN_USERNAME"
        },
        {
          "label": "ADMIN_PASSWORD",
          "name": "ADMIN_PASSWORD"
        },
        {
          "label": "PORT",
          "name": "PORT"
        }
      ],
      "logo": "https://raw.githubusercontent.com/docker-library/docs/9d36b4ed7cabc35dbd3849272ba2bd7abe482172/owncloud/logo.png",
      "name": "Owncloud",
      "note": "The database user is owncloud and the database is owncloud.",
      "platform": "linux",
      "repository": {
        "stackfile": "Template/Stack/owncloud.yml",
        "url": "https://github.com/Qballjos/portainer_templates"
      },
      "title": "Owncloud",
      "type": 3
    },
    {
      "categories": ["Media Server"],
      "description": "Petio is a third party companion app available to Plex server owners to allow their users to request, review and discover content.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "TZ",
          "name": "TZ"
        },
        {
          "label": "PORT",
          "name": "PORT"
        }
      ],
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/petio-icon.png",
      "name": "Petio",
      "platform": "linux",
      "repository": {
        "stackfile": "Template/Stack/petio.yml",
        "url": "https://github.com/Qballjos/portainer_templates"
      },
      "title": "Petio",
      "type": 3
    },
    {
      "categories": ["Photos"],
      "description": "A simple, easy way to turn a photo album into a webgallery.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/photoshow:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/photoshow-icon.png",
      "name": "photoshow",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "PhotoShow",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Pictures",
          "container": "/Pictures"
        },
        {
          "bind": "/portainer/Files/AppData/Photoshow/Thumbs",
          "container": "/Thumbs"
        },
        {
          "bind": "/portainer/Files/AppData/Config/PhotoShow",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["DNS"],
      "description": "A Linux network-level advertisement and Internet tracker blocking application which acts as a DNS sinkhole.",
      "image": "pihole/pihole:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/pihole.png",
      "name": "pihole",
      "note": "When the installation is complete, navigate to your.ip.goes.here:1010/admin. Follow the article <a href='https://medium.com/@niktrix/getting-rid-of-systemd-resolved-consuming-port-53-605f0234f32f'>here</a> if you run into issues binding to port 53.",
      "platform": "linux",
      "ports": [
        "53:53/tcp",
        "53:53/udp",
        "67:67/udp",
        "1010:80/tcp",
        "4443:443/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "Pi-Hole",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/PiHole",
          "container": "/etc/pihole"
        },
        {
          "bind": "/portainer/Files/AppData/Config/PiHole/DNS",
          "container": "/etc/dnsmasq.d"
        }
      ]
    },
    {
      "categories": ["Photos"],
      "description": "Piwigo is photo gallery software for the web, built by an active community of users and developers.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/piwigo:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/piwigo-icon.png",
      "name": "piwigo",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Piwigo",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/PiWigo",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Media Server"],
      "description": "Your favorite movies, TV, music, web shows, podcasts, and more, all streamed to your favorite screens.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "VERSION",
          "name": "VERSION",
          "set": "latest"
        }
      ],
      "image": "linuxserver/plex:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/plex-icon.png",
      "name": "plex",
      "network": "host",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "Plex",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Plex",
          "container": "/config"
        },
        {
          "bind": "/portainer/TV",
          "container": "/tv"
        },
        {
          "bind": "/portainer/Movies",
          "container": "/movies"
        }
      ]
    },
    {
      "categories": ["Media Server"],
      "description": "Simple automated way for users to request new content for Plex.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "label": "URL_BASE",
          "name": "URL_BASE",
          "set": ""
        }
      ],
      "image": "linuxserver/plexrequests:latest",
      "logo": "https://raw.githubusercontent.com/linuxserver/beta-templates/master/lsiodev/img/plexrequests-icon.png",
      "name": "plexrequests",
      "platform": "linux",
      "ports": ["3000:3000/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Plex Requests",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/PlexRequests",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Email"],
      "description": "This is an unofficial Docker container of the ProtonMail Bridge. Some of the scripts are based on Hendrik Meyer's work.",
      "image": "shenxn/protonmail-bridge:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/protonmail-bridge.png",
      "name": "protonmail-bridge",
      "note": "Please refer to the documentation <a href='https://hub.docker.com/r/shenxn/protonmail-bridge'/>here</a> to set this up.",
      "platform": "linux",
      "ports": ["143/tcp", "25/tcp"],
      "restart_policy": "unless-stopped",
      "title": "ProtonMail Bridge",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/ProtonMail-Bridge",
          "container": "/root"
        }
      ]
    },
    {
      "categories": ["Torrent Server"],
      "description": "The qBittorrent project aims to provide an open-source software alternative to µTorrent. qBittorrent is based on the Qt toolkit and libtorrent-rasterbar library.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/qbittorrent:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/qbittorrent-icon.png",
      "name": "qbittorrent",
      "platform": "linux",
      "ports": ["6881:6881/tcp", "6881:6881/udp", "8080:8080/tcp"],
      "restart_policy": "unless-stopped",
      "title": "qBittorrent",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/qBittorrent",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        }
      ]
    },
    {
      "categories": ["Usenet Server"],
      "description": "Radarr - A fork of Sonarr to work with movies à la Couchpotato.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "hotio/radarr:release",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/radarr.png",
      "name": "radarr",
      "platform": "linux",
      "ports": ["7878:7878/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Radarr",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Radarr",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        },
        {
          "bind": "/portainer/Movies",
          "container": "/movies"
        }
      ]
    },
    {
      "categories": ["Backup Server"],
      "description": "Resilio Sync (formerly BitTorrent Sync) uses the BitTorrent protocol to sync files and folders between all of your devices. There are both free and paid versions, this container supports both.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/resilio-sync:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/resilio.png",
      "name": "resilio-sync",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "Resilio Sync",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Resilio-Sync",
          "container": "/config"
        },
        {
          "container": "/sync"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        }
      ]
    },
    {
      "categories": ["Torrent Server"],
      "description": "Popular torrent client with a webui for ease of use.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/rutorrent:latest",
      "logo": "https://raw.githubusercontent.com/linuxserver/beta-templates/master/lsiodev/img/rutorrent-icon.png",
      "name": "rutorrent",
      "platform": "linux",
      "ports": ["80/tcp", "51413:51413/tcp", "6881:6881/udp"],
      "restart_policy": "unless-stopped",
      "title": "ruTorrent",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/ruTorrent",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        }
      ]
    },
    {
      "categories": ["Usenet Server"],
      "description": "SABnzbd makes Usenet as simple and streamlined as possible by automating everything we can. All you have to do is add an .nzb. SABnzbd takes over from there, where it will be automatically downloaded, verified, repaired, extracted and filed away with zero human interaction.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/sabnzbd:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/sabnzbd-icon.png",
      "name": "sabnzbd",
      "platform": "linux",
      "ports": ["8080:8080/tcp", "9090:9090/tcp"],
      "restart_policy": "unless-stopped",
      "title": "SABnzbd",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Sabnzbd",
          "container": "/config"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        },
        {
          "bind": "/portainer/Downloads/incomplete",
          "container": "/incomplete-downloads"
        }
      ]
    },
    {
      "categories": ["Family App Server"],
      "description": "Shiori is a simple bookmarks manager written in Go language. Intended as a simple clone of Pocket. You can use it as command line application or as web application.",
      "image": "radhifadlillah/shiori:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/shiori-icon.png",
      "name": "shiori",
      "platform": "linux",
      "ports": ["8080/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Shiori",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Shiori",
          "container": "/srv/shiori"
        }
      ]
    },
    {
      "categories": ["Utilities"],
      "description": "SmokePing is a latency logging and graphing and alerting system. It consists of a daemon process which organizes the latency measurements and a CGI which presents the graphs.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/smokeping:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/smokeping-icon.png",
      "name": "smokeping",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "SmokePing",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Smokeping",
          "container": "/config"
        },
        {
          "bind": "/portainer/Files/AppData/Smokeping",
          "container": "/data"
        }
      ]
    },
    {
      "categories": ["Code Server"],
      "description": "Self-hosted snippet manager.",
      "image": "snowmean/snibox-sqlite:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/snibox.png",
      "name": "Snibox",
      "note": "Label-oriented interface with search. Supports various programming languages, markdown, plain text.",
      "platform": "linux",
      "ports": ["3010:3000/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Snibox",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Snibox",
          "container": "/app/db/database"
        }
      ]
    },
    {
      "categories": ["Usenet Server"],
      "description": "Sonarr (formerly NZBdrone) is a PVR for usenet and bittorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "hotio/sonarr:release",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/sonarr-icon.png",
      "name": "sonarr",
      "platform": "linux",
      "ports": ["8989:8989/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Sonarr",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Sonarr",
          "container": "/config"
        },
        {
          "bind": "/dev/rtc",
          "container": "/dev/rtc"
        },
        {
          "bind": "/portainer/TV",
          "container": "/tv"
        },
        {
          "bind": "/portainer/Downloads",
          "container": "/downloads"
        }
      ]
    },
    {
      "categories": ["Backup Server"],
      "description": "Syncthing is a continuous file synchronization program. It synchronizes files between two or more computers in real time, safely protected from prying eyes.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/syncthing:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/syncthing-icon.png",
      "name": "syncthing",
      "platform": "linux",
      "ports": ["8384:8384/tcp", "21027:21027/udp", "22000:22000/tcp"],
      "restart_policy": "unless-stopped",
      "title": "SyncThing",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Syncthing",
          "container": "/config"
        },
        {
          "container": "/sync"
        }
      ]
    },
    {
      "categories": ["Media Server"],
      "description": "Tautulli is a 3rd party application that you can run along side your Plex Media Server to monitor activity and track various statistics. Most importantly, these statistics include what has been watched, who watched it, when and where they watched it, and how it was watched. All statistics are presented in a nice and clean interface with many tables and graphs, which makes it easy to brag about your server to everyone else.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/tautulli:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/tautulli-icon.png",
      "name": "tautulli",
      "note": "<b>Port 8181</b> The webui for Tautulli's webui<br/></br>Configuration <ul><li><b>/config</b> - Storing Configuration and the Tautulli database</li><li><b>/logs</b> - Map to you plex logs (required for IP logging)</li></ul>",
      "platform": "linux",
      "ports": ["8181:8181/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Tautulli",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Logs",
          "container": "/logs"
        },
        {
          "bind": "/portainer/Files/AppData/Config/Tautulli",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Notes Server"],
      "description": "A unique, non-linear notebook wiki.",
      "image": "mazzolino/tiddlywiki:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/tiddlywiki.png",
      "name": "tiddlywiki",
      "platform": "linux",
      "ports": ["8080:8080/tcp"],
      "restart_policy": "unless-stopped",
      "title": "TiddlyWiki",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/TiddlyWiki",
          "container": "/var/lib/tiddlywiki"
        }
      ]
    },
    {
      "categories": ["Smart Home"],
      "description": "Tiny Tiny RSS is an open source web-based news feed (RSS/Atom) reader and aggregator, designed to allow you to read news from any location, while feeling as close to a real desktop application as possible.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "lunik1/tt-rss:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/tt-rss-icon.png",
      "name": "tt-rss",
      "platform": "linux",
      "ports": ["80/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Tiny Tiny RSS",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/tt-rss",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Torrent Server"],
      "description": "Transmission is designed for easy, powerful use. Transmission has the features you want from a BitTorrent client: encryption, a web interface, peer exchange, magnet links, DHT, µTP, UPnP and NAT-PMP port forwarding, webseed support, watch directories, tracker editing, global and per-torrent speed limits, and more.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/transmission:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/transmission-icon.png",
      "name": "transmission",
      "platform": "linux",
      "ports": ["9091:9091/tcp", "51413:51413/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Transmission",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Transmission",
          "container": "/config"
        },
        {
          "bind": "/portainer/Files/Downloads",
          "container": "/downloads"
        },
        {
          "container": "/watch"
        }
      ]
    },
    {
      "categories": ["Torrent Server"],
      "description": "This container contains OpenVPN and Transmission with a configuration where Transmission is running only when OpenVPN has an active tunnel. It bundles configuration files for many popular VPN providers to make the setup easier.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        },
        {
          "default": "MULLVAD",
          "description": "https://haugene.github.io/docker-transmission-openvpn/supported-providers/",
          "label": "OPENVPN_PROVIDER",
          "name": "OPENVPN_PROVIDER"
        },
        {
          "default": "",
          "label": "OPENVPN_USERNAME",
          "name": "OPENVPN_USERNAME"
        },
        {
          "default": "",
          "label": "OPENVPN_PASSWORD",
          "name": "OPENVPN_PASSWORD"
        },
        {
          "default": "192.168.0.0/24",
          "label": "LOCAL_NETWORK",
          "name": "LOCAL_NETWORK"
        }
      ],
      "image": "haugene/transmission-openvpn:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/transmission-icon.png",
      "name": "transmission-openvpn",
      "note": "List of supported providers available <a href='https://haugene.github.io/docker-transmission-openvpn/supported-providers'/>here</a>.",
      "platform": "linux",
      "ports": ["9091:9091/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Transmission-OpenVPN",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Downloads",
          "container": "/data"
        },
        {
          "bind": "/etc/localtime",
          "container": "/etc/localtime"
        }
      ]
    },
    {
      "categories": ["Library Server"],
      "description": "Ubooquity is a free, lightweight and easy-to-use home server for your comics and ebooks. Use it to access your files from anywhere, with a tablet, an e-reader, a phone or a computer.",
      "env": [
        {
          "label": "MAXMEM",
          "name": "MAXMEM",
          "set": "512"
        },
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/ubooquity:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/ubooquity-icon.png",
      "name": "ubooquity",
      "platform": "linux",
      "ports": ["2202:2202/tcp", "2203:2203/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Ubooquity",
      "type": 1,
      "volumes": [
        {
          "container": "/books"
        },
        {
          "container": "/comics"
        },
        {
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Smart Home"],
      "description": "The Unifi-controller Controller software is a powerful, enterprise wireless software engine ideal for high-density client deployments requiring low latency and high uptime performance.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/unifi-controller:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/unifi-icon.png",
      "name": "unifi-controller",
      "platform": "linux",
      "ports": [
        "3478:3478/udp",
        "10001:10001/udp",
        "8080:8080/tcp",
        "8081:8081/tcp",
        "8443:8443/tcp",
        "8843:8843/tcp",
        "8880:8880/tcp",
        "6789:6789/tcp"
      ],
      "restart_policy": "unless-stopped",
      "title": "UniFi Controller",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Unifi",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Maintenance"],
      "description": "With watchtower you can update the running version of your containerized app simply by pushing a new image to the Docker Hub or your own image registry. Watchtower will pull down your new image, gracefully shut down your existing container and restart it with the same options that were used when it was deployed initially.",
      "image": "containrrr/watchtower:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/watchtower.png",
      "name": "watchtower",
      "note": "It is recommended to manually update your containers but we're including this for those of you that don't care",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "Watchtower",
      "type": 1,
      "volumes": [
        {
          "bind": "/var/run/docker.sock",
          "container": "/var/run/docker.sock"
        }
      ]
    },
    {
      "categories": ["Downloaders"],
      "description": "WebGrab+Plus is a multi-site incremental xmltv epg grabber. It collects tv-program guide data from selected tvguide sites for your favourite channels.",
      "env": [
        {
          "default": "1000",
          "label": "PUID",
          "name": "PUID"
        },
        {
          "default": "100",
          "label": "PGID",
          "name": "PGID"
        }
      ],
      "image": "linuxserver/webgrabplus:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/webgrabplus.png",
      "name": "webgrabplus",
      "note": "Configuration <ul><li><b>/config</b> - This is where WebGrab+Plus will store it's configuration</li><li><b>/data</b> - This is where tv_grab_wg script in the Tvheadend container looks for the guide.xml file.</li></ul>",
      "platform": "linux",
      "restart_policy": "unless-stopped",
      "title": "WebGrab+Plus",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/WebGrabPlus",
          "container": "/config"
        },
        {
          "bind": "/portainer/Files/AppData/WebGrabPlus",
          "container": "/data"
        }
      ]
    },
    {
      "categories": ["Family App Server"],
      "description": "Self-hosted, ad-free, privacy-respecting Google metasearch engine.",
      "image": "benbusby/whoogle-search:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/whoogle.png",
      "name": "whoogle",
      "platform": "linux",
      "ports": ["5001:5000/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Whoogle",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Whoogle",
          "container": "/config"
        }
      ]
    },
    {
      "categories": ["Notes Server"],
      "description": "Wikijs A modern, lightweight and powerful wiki app built on NodeJS.",
      "image": "linuxserver/wikijs:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/wikijs.png",
      "name": "Wikijs",
      "platform": "linux",
      "ports": ["3100:3000/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Wikijs",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/Wikijs",
          "container": "/config"
        },
        {
          "bind": "/portainer/Files/AppData/Config/Wikijs/data",
          "container": "/data"
        }
      ]
    },
    {
      "categories": ["Dashboard Server"],
      "description": "A web interface for managing docker containers with an emphasis on templating to provide 1 click deployments. Think of it like a decentralized app store for servers that anyone can make packages for.",
      "image": "selfhostedpro/yacht:latest",
      "logo": "https://raw.githubusercontent.com/SelfhostedPro/Yacht/master/readme_media/Yacht_logo_1_dark.png",
      "name": "yacht",
      "platform": "linux",
      "ports": ["8001:8000/tcp"],
      "restart_policy": "unless-stopped",
      "title": "Yacht",
      "type": 1,
      "volumes": [
        {
          "bind": "yacht",
          "container": "/config"
        },
        {
          "bind": "/var/run/docker.sock",
          "container": "/var/run/docker.sock"
        }
      ]
    },
	{
    "type": 1,
    "categories": ["Tools"],
    "title": "Audacity",
    "name": "Audacity",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/audacity/config</p>",
    "description": "[Audacity](https://www.audacityteam.org/) is an easy-to-use, multi-track audio editor and recorder. Developed by a group of volunteers as open source.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/audacity-logo.png",
    "image": "linuxserver/audacity:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        }
    ],
    "ports": [
        "3000:3000/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/audacity/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Library Server"],
    "title": "Booksonic-air",
    "name": "Booksonic-air",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/booksonic-air/config<br>mkdir -p /volume1/docker/booksonic-air/audiobooks<br>mkdir -p /volume1/docker/booksonic-air/podcasts<br>mkdir -p /volume1/docker/booksonic-air/othermedia</p>",
    "description": "[Booksonic-air](http://booksonic.org) is a platform for accessing the audibooks you own wherever you are. At the moment the platform consists of Booksonic Air - A server for streaming your audiobooks, successor to the original Booksonic server and based on Airsonic. Booksonic App - An DSub based Android app for connection to Booksonic-Air servers. .",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/booksonic-air.png",
    "image": "linuxserver/booksonic-air:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "CONTEXT_PATH",
            "label": "CONTEXT_PATH",
            "default": "url-base",
            "description": "Base url for use with reverse proxies etc."
        }
    ],
    "ports": [
        "4040:4040/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/booksonic-air/config"
    },
    {
        "container": "/audiobooks",
        "bind": "/volume1/docker/booksonic-air/audiobooks"
    },
    {
        "container": "/podcasts",
        "bind": "/volume1/docker/booksonic-air/podcasts"
    },
    {
        "container": "/othermedia",
        "bind": "/volume1/docker/booksonic-air/othermedia"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Code Server"],
    "title": "Cloud9",
    "name": "Cloud9",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/cloud9/config<br>mkdir -p /volume1/docker/cloud9/code<br></p>",
    "description": "[Cloud9](https://github.com/c9/core) Cloud9 is a complete web based IDE with terminal access. This container is for running their core SDK locally and developing plugins.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/cloud9.png",
    "image": "linuxserver/cloud9:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "GITURL",
            "label": "GITURL",
            "default": "https://github.com/linuxserver/docker-cloud9.git",
            "description": "Specify a git repo to checkout on first startup"
        },
        {
            "name": "USERNAME",
            "label": "USERNAME",
            "default": "",
            "description": "Optionally specify a username for http auth"
        },
        {
            "name": "PASSWORD",
            "label": "PASSWORD",
            "default": "",
            "description": "Optionally specify a password for http auth (if USERNAME and PASSWORD are not set, there will be no http auth)"
        }
    ],
    "ports": [
        "8000:8000/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/cloud9/config"
    },
    {
        "container": "/code",
        "bind": "/volume1/docker/cloud9/code"
    },
    {
        "container": "/var/run/docker.sock",
        "bind": "/var/run/docker.sock"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Notes Server"],
    "title": "Dokuwiki",
    "name": "Dokuwiki",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/dokuwiki/config</p>",
    "description": "[Dokuwiki](https://www.dokuwiki.org/dokuwiki/) is a simple to use and highly versatile Open Source wiki software that doesn't require a database. It is loved by users for its clean and readable syntax. The ease of maintenance, backup and integration makes it an administrator's favorite. Built in access controls and authentication connectors make DokuWiki especially useful in the enterprise context and the large number of plugins contributed by its vibrant community allow for a broad range of use cases beyond a traditional wiki.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/dokuwiki-icon.png",
    "image": "linuxserver/dokuwiki:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        }
    ],
    "ports": [
        "80:80/tcp",
        "443:443/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/dokuwiki/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Gaming Server"],
    "title": "Emulatorjs",
    "name": "Emulatorjs",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/emulatorjs/config<br>mkdir -p /volume1/docker/emulatorjs/data</p>",
    "description": "[Emulatorjs](https://github.com/linuxserver/emulatorjs) - In browser web based emulation portable to nearly any device for many retro consoles. A mix of emulators is used between Libretro and EmulatorJS.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/emulatorjs-logo.png",
    "image": "linuxserver/emulatorjs:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "SUBFOLDER",
            "label": "SUBFOLDER",
            "default": "/",
            "description": "Specify a subfolder for reverse proxies IE '/FOLDER/'"
        }
    ],
    "ports": [
        "3000:3000/tcp",
        "80:80/tcp",
        "4001:4001/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/emulatorjs/config"
    },
    {
        "container": "/data",
        "bind": "/volume1/docker/emulatorjs/data"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Tools"],
    "title": "Endlessh",
    "name": "Endlessh",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/endlessh/config</p>",
    "description": "[Endlessh](https://github.com/skeeto/endlessh) is an SSH tarpit that very slowly sends an endless, random SSH banner. It keeps SSH clients locked up for hours or even days at a time. The purpose is to put your real SSH server on another port and then let the script kiddies get stuck in this tarpit instead of bothering a real server.",
    "platform": "linux",
    "logo": "https://github.com/linuxserver/docker-templates/raw/master/linuxserver.io/img/openssh-server-logo.png",
    "image": "linuxserver/endlessh:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "MSDELAY",
            "label": "MSDELAY",
            "default": "10000",
            "description": "The endless banner is sent one line at a time. This is the delay in milliseconds between individual lines."
        },
        {
            "name": "MAXLINES",
            "label": "MAXLINES",
            "default": "32",
            "description": "The length of each line is randomized. This controls the maximum length of each line. Shorter lines may keep clients on for longer if they give up after a certain number of bytes."
        },
        {
            "name": "MAXCLIENTS",
            "label": "MAXCLIENTS",
            "default": "4096",
            "description": "Maximum number of connections to accept at a time. Connections beyond this are not immediately rejected, but will wait in the queue."
        },
        {
            "name": "LOGFILE",
            "label": "LOGFILE",
            "default": "false",
            "description": "By default, the app logs to container log. If this is set to `true`, the log will be output to file under `/config/logs/endlessh` (`/config` needs to be mapped)."
        },
        {
            "name": "BINDFAMILY",
            "label": "BINDFAMILY",
            "default": "",
            "description": "By default, the app binds to IPv4 and IPv6 addresses. Set it to `4` or `6` to bind to IPv4 only or IPv6 only, respectively. Leave blank to bind to both."
        }
    ],
    "ports": [
        "22:2222/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/endlessh/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Media Server"],
    "title": "Ffmpeg",
    "name": "Ffmpeg",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/ffmpeg/config</p>",
    "description": "This container needs special attention. Please check https://hub.docker.com/r/linuxserver/ffmpeg for details.",
    "platform": "linux",
    "logo": "",
    "image": "linuxserver/ffmpeg:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        }
    ],
    "ports": [
        "80:80/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/ffmpeg/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["FTP Server"],
    "title": "Filezilla",
    "name": "Filezilla",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/filezilla/config</p>",
    "description": "[FIleZilla](https://filezilla-project.org/) Client is a fast and reliable cross-platform FTP, FTPS and SFTP client with lots of useful features and an intuitive graphical user interface.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/filezilla-logo.png",
    "image": "linuxserver/filezilla:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        }
    ],
    "ports": [
        "3000:3000/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/filezilla/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Tools"],
    "title": "Healthchecks",
    "name": "Healthchecks",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/healthchecks/config</p>",
    "description": "[Healthchecks](https://github.com/healthchecks/healthchecks) is a watchdog for your cron jobs. It's a web server that listens for pings from your cron jobs, plus a web interface.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/healthchecks/healthchecks/master/static/img/welcome.png",
    "image": "linuxserver/healthchecks:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "SITE_ROOT",
            "label": "SITE_ROOT",
            "default": "<SITE_ROOT>",
            "description": "The site's top-level URL and the port it listens to if differrent than 80 or 443 (e.g., https://healthchecks.example.com:8000)"
        },
        {
            "name": "SITE_NAME",
            "label": "SITE_NAME",
            "default": "<SITE_NAME>",
            "description": "The site's name (e.g., 'Example Corp HealthChecks')"
        },
        {
            "name": "DEFAULT_FROM_EMAIL",
            "label": "DEFAULT_FROM_EMAIL",
            "default": "<DEFAULT_FROM_EMAIL>",
            "description": "From email for alerts"
        },
        {
            "name": "EMAIL_HOST",
            "label": "EMAIL_HOST",
            "default": "<EMAIL_HOST>",
            "description": "SMTP host"
        },
        {
            "name": "EMAIL_PORT",
            "label": "EMAIL_PORT",
            "default": "<EMAIL_PORT>",
            "description": "SMTP port"
        },
        {
            "name": "EMAIL_HOST_USER",
            "label": "EMAIL_HOST_USER",
            "default": "<EMAIL_HOST_USER>",
            "description": "SMTP user"
        },
        {
            "name": "EMAIL_HOST_PASSWORD",
            "label": "EMAIL_HOST_PASSWORD",
            "default": "<EMAIL_HOST_PASSWORD>",
            "description": "SMTP password"
        },
        {
            "name": "EMAIL_USE_TLS",
            "label": "EMAIL_USE_TLS",
            "default": "<True or False>",
            "description": "Use TLS for SMTP (`True` or `False`)"
        },
        {
            "name": "ALLOWED_HOSTS",
            "label": "ALLOWED_HOSTS",
            "default": "<ALLOWED_HOSTS>",
            "description": "array of valid hostnames for the server `['test.com','test2.com']` (default: `['*']`)"
        },
        {
            "name": "SUPERUSER_EMAIL",
            "label": "SUPERUSER_EMAIL",
            "default": "<SUPERUSER_EMAIL>",
            "description": "Superuser email"
        },
        {
            "name": "SUPERUSER_PASSWORD",
            "label": "SUPERUSER_PASSWORD",
            "default": "<SUPERUSER_PASSWORD>",
            "description": "Superuser password"
        },
        {
            "name": "REGENERATE_SETTINGS",
            "label": "REGENERATE_SETTINGS",
            "default": "True/False",
            "description": "Defaults to False. Set to true to always override the `local_settings.py` file with values from environment variables. Do not set to True if you have made manual modifications to this file."
        },
        {
            "name": "SITE_LOGO_URL",
            "label": "SITE_LOGO_URL",
            "default": "<SITE_LOGO_URL>",
            "description": "Custom site logo URL"
        },
        {
            "name": "SECRET_KEY",
            "label": "SECRET_KEY",
            "default": "<SECRET_KEY>",
            "description": "A secret key used for cryptographic signing. docker-healthchecks will generate a secure value if one does not exist"
        },
        {
            "name": "APPRISE_ENABLED",
            "label": "APPRISE_ENABLED",
            "default": "True/False",
            "description": "Defaults to False. A boolean that turns on/off the Apprise integration (https://github.com/caronc/apprise)"
        }
    ],
    "ports": [
        "8000:8000/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/healthchecks/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Smart Home"],
    "title": "Homeassistant",
    "name": "Homeassistant",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/homeassistant/config</p>",
    "description": "[Home Assistant Core](https://www.home-assistant.io/) - Open source home automation that puts local control and privacy first. Powered by a worldwide community of tinkerers and DIY enthusiasts. Perfect to run on a Raspberry Pi or a local server.",
    "platform": "linux",
    "logo": "https://github.com/home-assistant/home-assistant.io/raw/next/source/images/favicon-192x192-full.png",
    "image": "linuxserver/homeassistant:latest",
    "network": "host",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        }
    ],
    "ports": [
        "8123:8123/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/homeassistant/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Media Server"],
    "title": "Kanzi",
    "name": "Kanzi",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/kanzi/config</p>",
    "description": "[Kanzi](https://lexigr.am/), formerly titled Kodi-Alexa, this custom skill is the ultimate voice remote control for navigating Kodi. It can do anything you can think of (100+ intents). This container also contains lexigram-cli to setup Kanzi with an Amazon Developer Account and automatically deploy it to Amazon.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/kanzi.png",
    "image": "linuxserver/kanzi:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "INVOCATION_NAME",
            "label": "INVOCATION_NAME",
            "default": "kanzi",
            "description": "Specify an invocation name for this skill, use either kanzi or kod."
        },
        {
            "name": "URL_ENDPOINT",
            "label": "URL_ENDPOINT",
            "default": "https://server.com/kanzi/",
            "description": "Specify the URL at which the webserver is reachable either `https://kanzi.server.com/` or `https://server.com/kanzi/` Note the trailing slash **MUST** be included."
        }
    ],
    "ports": [
        "8000:8000/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/kanzi/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Proxy Server"],
    "title": "Ldap-auth",
    "name": "Ldap-auth",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p>",
    "description": "[Ldap-auth](https://github.com/nginxinc/nginx-ldap-auth) software is for authenticating users who request protected resources from servers proxied by nginx. It includes a daemon (ldap-auth) that communicates with an authentication server, and a webserver daemon that generates an authentication cookie based on the user’s credentials. The daemons are written in Python for use with a Lightweight Directory Access Protocol (LDAP) authentication server (OpenLDAP or Microsoft Windows Active Directory 2003 and 2012).",
    "platform": "linux",
    "logo": "https://jumpcloud.com/wp-content/uploads/2016/12/LDAP_Logo-1420591101.jpg",
    "image": "linuxserver/ldap-auth:latest",
    "env": [
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "FERNETKEY",
            "label": "FERNETKEY",
            "default": "",
            "description": "Optionally define a custom fernet key, has to be base64-encoded 32-byte (only needed if container is frequently recreated, or if using multi-node setups, invalidating previous authentications)"
        },
        {
            "name": "CERTFILE",
            "label": "CERTFILE",
            "default": "",
            "description": "Point this to a certificate file to enable HTTP over SSL (HTTPS) for the ldap auth daemon"
        },
        {
            "name": "KEYFILE",
            "label": "KEYFILE",
            "default": "",
            "description": "Point this to the private key file, matching the certificate file referred to in CERTFILE"
        }
    ],
    "ports": [
        "8888:8888/tcp",
        "9000:9000/tcp"
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Family App Server"],
    "title": "Libreoffice",
    "name": "Libreoffice",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/libreoffice/config</p>",
    "description": "[LibreOffice](https://www.libreoffice.org/) is a free and powerful office suite, and a successor to OpenOffice.org (commonly known as OpenOffice). Its clean interface and feature-rich tools help you unleash your creativity and enhance your productivity.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/libreoffice-logo.png",
    "image": "linuxserver/libreoffice:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        }
    ],
    "ports": [
        "3000:3000/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/libreoffice/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Code Server"],
    "title": "Limnoria",
    "name": "Limnoria",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/limnoria/config</p>",
    "description": "[Limnoria](https://github.com/ProgVal/limnoria) A robust, full-featured, and user/programmer-friendly Python IRC bot, with many existing plugins. Successor of the well-known Supybot.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-limnoria/master/logo.png",
    "image": "linuxserver/limnoria:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        }
    ],
    "ports": [
        "8080:8080/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/limnoria/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Tools"],
    "title": "Nano",
    "name": "Nano",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/nano/config</p>",
    "description": "[Nano](https://nano.org/) is a digital payment protocol designed to be accessible and lightweight, with a focus on removing inefficiencies present in other cryptocurrencies. With ultrafast transactions and zero fees on a secure, green and decentralized network, this makes Nano ideal for everyday transactions.",
    "platform": "linux",
    "logo": "https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/Nano_logo.png/640px-Nano_logo.png",
    "image": "linuxserver/nano:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "PEER_HOST",
            "label": "PEER_HOST",
            "default": "localhost",
            "description": "Default peer host (can be overidden with an array by command line options)"
        },
        {
            "name": "LIVE_GENESIS_PUB",
            "label": "LIVE_GENESIS_PUB",
            "default": "GENESIS_PUBLIC",
            "description": "Genesis block public key"
        },
        {
            "name": "LIVE_GENESIS_ACCOUNT",
            "label": "LIVE_GENESIS_ACCOUNT",
            "default": "nano_xxxxxx",
            "description": "Genesis block account"
        },
        {
            "name": "LIVE_GENESIS_WORK",
            "label": "LIVE_GENESIS_WORK",
            "default": "WORK_FOR_BLOCK",
            "description": "Genesis block proof of work"
        },
        {
            "name": "LIVE_GENESIS_SIG",
            "label": "LIVE_GENESIS_SIG",
            "default": "BLOCK_SIGNATURE",
            "description": "Genesis block signature"
        },
        {
            "name": "CLI_OPTIONS",
            "label": "CLI_OPTIONS",
            "default": "--config node.enable_voting=true",
            "description": "Node run command cli args"
        },
        {
            "name": "LMDB_BOOTSTRAP_URL",
            "label": "LMDB_BOOTSTRAP_URL",
            "default": "http://example.com/Nano_64_version_20.7z",
            "description": "HTTP/HTTPS endpoint to download a 7z file with the data.ldb to bootstrap to this node"
        }
    ],
    "ports": [
        "8075:8075/tcp",
        "7076:3000/tcp",
        "7077:3001/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/nano/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Tools"],
    "title": "Nano-wallet",
    "name": "Nano-wallet",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p>",
    "description": "[Nano-wallet](https://nano.org/) is a digital payment protocol designed to be accessible and lightweight, with a focus on removing inefficiencies present in other cryptocurrencies. With ultrafast transactions and zero fees on a secure, green and decentralized network, this makes Nano ideal for everyday transactions. This container is a simple nginx wrapper for the light wallet located [here](https://github.com/linuxserver/nano-wallet). You will need to pass a valid RPC host when accessing this container.",
    "platform": "linux",
    "logo": "https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/Nano_logo.png/640px-Nano_logo.png",
    "image": "linuxserver/nano-wallet:latest",
    "ports": [
        "80:80/tcp"
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Utilities"],
    "title": "Netbox",
    "name": "Netbox",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/netbox/config</p>",
    "description": "[Netbox](https://github.com/netbox-community/netbox) is an IP address management (IPAM) and data center infrastructure management (DCIM) tool. Initially conceived by the network engineering team at DigitalOcean, NetBox was developed specifically to address the needs of network and infrastructure engineers. It is intended to function as a domain-specific source of truth for network operations.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/netbox-community/netbox/develop/docs/netbox_logo.svg",
    "image": "linuxserver/netbox:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "SUPERUSER_EMAIL",
            "label": "SUPERUSER_EMAIL",
            "default": "<SUPERUSER_EMAIL>",
            "description": "Email address for `admin` account"
        },
        {
            "name": "SUPERUSER_PASSWORD",
            "label": "SUPERUSER_PASSWORD",
            "default": "<SUPERUSER_PASSWORD>",
            "description": "Password for `admin` account"
        },
        {
            "name": "ALLOWED_HOST",
            "label": "ALLOWED_HOST",
            "default": "<ALLOWED_HOST>",
            "description": "The hostname you will use to access the app (i.e., netbox.example.com)"
        },
        {
            "name": "DB_NAME",
            "label": "DB_NAME",
            "default": "<DB_NAME>",
            "description": "Database name (default: netbox)"
        },
        {
            "name": "DB_USER",
            "label": "DB_USER",
            "default": "<DB_USER>",
            "description": "Database user"
        },
        {
            "name": "DB_PASSWORD",
            "label": "DB_PASSWORD",
            "default": "<DB_PASSWORD>",
            "description": "Database password"
        },
        {
            "name": "DB_HOST",
            "label": "DB_HOST",
            "default": "<DB_HOST>",
            "description": "Database host (default: postgres)"
        },
        {
            "name": "DB_PORT",
            "label": "DB_PORT",
            "default": "<DB_PORT>",
            "description": "Database port (defaul: 5432)"
        },
        {
            "name": "REDIS_HOST",
            "label": "REDIS_HOST",
            "default": "<REDIS_HOST>",
            "description": "Redis host (default: redis)"
        },
        {
            "name": "REDIS_PORT",
            "label": "REDIS_PORT",
            "default": "<REDIS_PORT>",
            "description": "Redis port number (default: 6379)"
        },
        {
            "name": "REDIS_PASSWORD",
            "label": "REDIS_PASSWORD",
            "default": "<REDIS_PASSWORD>",
            "description": "Redis password (default: none)"
        },
        {
            "name": "REDIS_DB_TASK",
            "label": "REDIS_DB_TASK",
            "default": "<REDIS_DB_TASK>",
            "description": "Redis database ID for tasks (default: 0)"
        },
        {
            "name": "REDIS_DB_CACHE",
            "label": "REDIS_DB_CACHE",
            "default": "<REDIS_DB_CACHE>",
            "description": "Redis database ID for caching (default: 1)"
        },
        {
            "name": "BASE_PATH",
            "label": "BASE_PATH",
            "default": "<BASE_PATH>",
            "description": "The path you will use to access the app (i.e., /netbox, optional, default: none)"
        },
        {
            "name": "REMOTE_AUTH_ENABLED",
            "label": "REMOTE_AUTH_ENABLED",
            "default": "<REMOTE_AUTH_ENABLED>",
            "description": "Enable remote authentication (optional, default: False)"
        },
        {
            "name": "REMOTE_AUTH_BACKEND",
            "label": "REMOTE_AUTH_BACKEND",
            "default": "<REMOTE_AUTH_BACKEND>",
            "description": "Python path to the custom Django authentication backend to use for external user authentication (optional, default: netbox.authentication.RemoteUserBackend)"
        },
        {
            "name": "REMOTE_AUTH_HEADER",
            "label": "REMOTE_AUTH_HEADER",
            "default": "<REMOTE_AUTH_HEADER>",
            "description": "Name of the HTTP header which informs NetBox of the currently authenticated user. (optional, default: HTTP_REMOTE_USER)"
        },
        {
            "name": "REMOTE_AUTH_AUTO_CREATE_USER",
            "label": "REMOTE_AUTH_AUTO_CREATE_USER",
            "default": "<REMOTE_AUTH_AUTO_CREATE_USER>",
            "description": "If true, NetBox will automatically create local accounts for users authenticated via a remote service (optional, default: False)"
        },
        {
            "name": "REMOTE_AUTH_DEFAULT_GROUPS",
            "label": "REMOTE_AUTH_DEFAULT_GROUPS",
            "default": "<REMOTE_AUTH_DEFAULT_GROUPS>",
            "description": "The list of groups to assign a new user account when created using remote authentication (optional, default: [])"
        },
        {
            "name": "REMOTE_AUTH_DEFAULT_PERMISSIONS",
            "label": "REMOTE_AUTH_DEFAULT_PERMISSIONS",
            "default": "<REMOTE_AUTH_DEFAULT_PERMISSIONS>",
            "description": "A mapping of permissions to assign a new user account when created using remote authentication (optional, default: {})"
        }
    ],
    "ports": [
        "8000:8000/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/netbox/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Tools"],
    "title": "Openssh-server",
    "name": "Openssh-server",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/openssh-server/config</p>",
    "description": "[Openssh-server](https://www.openssh.com/) is a sandboxed environment that allows ssh access without giving keys to the entire server. Giving ssh access via private key often means giving full access to the server. This container creates a limited and sandboxed environment that others can ssh into. The users only have access to the folders mapped and the processes running inside this container.",
    "platform": "linux",
    "logo": "https://upload.wikimedia.org/wikipedia/en/6/65/OpenSSH_logo.png",
    "image": "linuxserver/openssh-server:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "PUBLIC_KEY",
            "label": "PUBLIC_KEY",
            "default": "yourpublickey",
            "description": "Optional ssh public key, which will automatically be added to authorized_keys."
        },
        {
            "name": "PUBLIC_KEY_FILE",
            "label": "PUBLIC_KEY_FILE",
            "default": "/path/to/file",
            "description": "Optionally specify a file containing the public key (works with docker secrets)."
        },
        {
            "name": "PUBLIC_KEY_DIR",
            "label": "PUBLIC_KEY_DIR",
            "default": "/path/to/directory/containing/_only_/pubkeys",
            "description": "Optionally specify a directory containing the public keys (works with docker secrets)."
        },
        {
            "name": "PUBLIC_KEY_URL",
            "label": "PUBLIC_KEY_URL",
            "default": "https://github.com/username.keys",
            "description": "Optionally specify a URL containing the public key."
        },
        {
            "name": "SUDO_ACCESS",
            "label": "SUDO_ACCESS",
            "default": "false",
            "description": "Set to `true` to allow `linuxserver.io`, the ssh user, sudo access. Without `USER_PASSWORD` set, this will allow passwordless sudo access."
        },
        {
            "name": "PASSWORD_ACCESS",
            "label": "PASSWORD_ACCESS",
            "default": "false",
            "description": "Set to `true` to allow user/password ssh access. You will want to set `USER_PASSWORD` or `USER_PASSWORD_FILE` as well."
        },
        {
            "name": "USER_PASSWORD",
            "label": "USER_PASSWORD",
            "default": "password",
            "description": "Optionally set a sudo password for `linuxserver.io`, the ssh user. If this or `USER_PASSWORD_FILE` are not set but `SUDO_ACCESS` is set to true, the user will have passwordless sudo access."
        },
        {
            "name": "USER_PASSWORD_FILE",
            "label": "USER_PASSWORD_FILE",
            "default": "/path/to/file",
            "description": "Optionally specify a file that contains the password. This setting supersedes the `USER_PASSWORD` option (works with docker secrets)."
        },
        {
            "name": "USER_NAME",
            "label": "USER_NAME",
            "default": "linuxserver.io",
            "description": "Optionally specify a user name (Default:`linuxserver.io`)"
        }
    ],
    "ports": [
        "2222:2222/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/openssh-server/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Family App Server"],
    "title": "Paperless-ng",
    "name": "Paperless-ng",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/paperless-ng/config<br>mkdir -p /volume1/docker/paperless-ng/data</p>",
    "description": "[Paperless-ng](https://github.com/jonaswinkler/paperless-ng) is an application by Daniel Quinn and contributors that indexes your scanned documents and allows you to easily search for documents and store metadata alongside your documents.'",
    "platform": "linux",
    "logo": "",
    "image": "linuxserver/paperless-ng:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "REDIS_URL",
            "label": "REDIS_URL",
            "default": "",
            "description": "Specify an external redis instance to use. Can optionally include a port (`redis:6379`) and/or db (`redis/foo`). If left blank or not included, will use a built-in redis instance. If changed after initial setup will also require manual modification of /config/settings.py"
        }
    ],
    "ports": [
        "8000:8000/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/paperless-ng/config"
    },
    {
        "container": "/data",
        "bind": "/volume1/docker/paperless-ng/data"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Family App Server"],
    "title": "Papermerge",
    "name": "Papermerge",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/papermerge/config<br>mkdir -p /volume1/docker/papermerge/data</p>",
    "description": "[Papermerge](https://www.papermerge.com/) is an open source document management system (DMS) primarily designed for archiving and retrieving your digital documents. Instead of having piles of paper documents all over your desk, office or drawers - you can quickly scan them and configure your scanner to directly upload to Papermerge DMS.'",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/papermerge-icon.png",
    "image": "linuxserver/papermerge:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "REDIS_URL",
            "label": "REDIS_URL",
            "default": "",
            "description": "Specify an external redis instance to use. Can optionally include a port (`redis:6379`) and/or db (`redis/foo`). If left blank or not included, will use a built-in redis instance. If changed after initial setup will also require manual modification of /config/settings.py"
        }
    ],
    "ports": [
        "8000:8000/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/papermerge/config"
    },
    {
        "container": "/data",
        "bind": "/volume1/docker/papermerge/data"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Chat Server"],
    "title": "Pidgin",
    "name": "Pidgin",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/pidgin/config</p>",
    "description": "[Pidgin](https://pidgin.im/) is a chat program which lets you log into accounts on multiple chat networks simultaneously. This means that you can be chatting with friends on XMPP and sitting in an IRC channel at the same time.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/pidgin-logo.png",
    "image": "linuxserver/pidgin:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        }
    ],
    "ports": [
        "3000:3000/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/pidgin/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Utilities"],
    "title": "Rdesktop",
    "name": "Rdesktop",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p><br>mkdir -p /volume1/docker/rdesktop/config</p>",
    "description": "[Rdesktop](http://xrdp.org/) - Ubuntu based containers containing full desktop environments in officially supported flavors accessible via RDP.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/rdesktop.png",
    "image": "linuxserver/rdesktop:latest",
    "privileged": true,
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        }
    ],
    "ports": [
        "3389:3389/tcp"
    ],
    "volumes": [
    {
        "container": "/var/run/docker.sock",
        "bind": "/var/run/docker.sock"
    },
    {
        "container": "/config",
        "bind": "/volume1/docker/rdesktop/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Backup Server"],
    "title": "Rsnapshot",
    "name": "Rsnapshot",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/rsnapshot/config<br>mkdir -p /volume1/docker/rsnapshot/.snapshots<br>mkdir -p /volume1/docker/rsnapshot/data</p>",
    "description": "[Rsnapshot](http://www.rsnapshot.org/) is a filesystem snapshot utility based on rsync. rsnapshot makes it easy to make periodic snapshots of local machines, and remote machines over ssh. The code makes extensive use of hard links whenever possible, to greatly reduce the disk space required.'",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/rsnapshot.png",
    "image": "linuxserver/rsnapshot:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        }
    ],
    "ports": [
        "80:80/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/rsnapshot/config"
    },
    {
        "container": "/.snapshots",
        "bind": "/volume1/docker/rsnapshot/.snapshots"
    },
    {
        "container": "/data",
        "bind": "/volume1/docker/rsnapshot/data"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "categories": ["Family App Server"],
    "title": "Snapdrop",
    "name": "Snapdrop",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/snapdrop/config</p>",
    "description": "[Snapdrop](https://github.com/RobinLinus/snapdrop) A local file sharing in your browser. Inspired by Apple's Airdrop.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/RobinLinus/snapdrop/master/client/images/logo_transparent_512x512.png",
    "image": "linuxserver/snapdrop:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        }
    ],
    "ports": [
        "80:80/tcp",
        "443:443/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/snapdrop/config"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "type": 1,
    "title": "Webtop",
    "name": "Webtop",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/webtop/config<br></p>",
    "description": "[Webtop](https://github.com/linuxserver/docker-webtop) - Alpine, Ubuntu, Fedora, and Arch based containers containing full desktop environments in officially supported flavors accessible via any modern web browser.",
    "categories": [
        "Utilities"
    ],
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/webtop-logo.png",
    "image": "linuxserver/webtop:latest",
    "privileged": true,
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "SUBFOLDER",
            "label": "SUBFOLDER",
            "default": "/",
            "description": "Specify a subfolder to use with reverse proxies, IE `/subfolder/`"
        }
    ],
    "ports": [
        "3000:3000/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/webtop/config"
    },
    {
        "container": "/var/run/docker.sock",
        "bind": "/var/run/docker.sock"
    }
    ],
    "restart_policy": "unless-stopped"
},	
{
    "type": 1,
    "categories": ["VPN Server"],
    "title": "Wireguard",
    "name": "Wireguard",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/wireguard/config<br></p>",
    "description": "[WireGuard®](https://www.wireguard.com/) is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be faster, simpler, leaner, and more useful than IPsec, while avoiding the massive headache. It intends to be considerably more performant than OpenVPN. WireGuard is designed as a general purpose VPN for running on embedded interfaces and super computers alike, fit for many different circumstances. Initially released for the Linux kernel, it is now cross-platform (Windows, macOS, BSD, iOS, Android) and widely deployable. It is currently under heavy development, but already it might be regarded as the most secure, easiest to use, and simplest VPN solution in the industry.",
    "platform": "linux",
    "logo": "https://www.wireguard.com/img/wireguard.svg",
    "image": "linuxserver/wireguard:latest",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        },
        {
            "name": "SERVERURL",
            "label": "SERVERURL",
            "default": "wireguard.domain.com",
            "description": "External IP or domain name for docker host. Used in server mode. If set to `auto`, the container will try to determine and set the external IP automatically"
        },
        {
            "name": "SERVERPORT",
            "label": "SERVERPORT",
            "default": "51820",
            "description": "External port for docker host. Used in server mode."
        },
        {
            "name": "PEERS",
            "label": "PEERS",
            "default": "1",
            "description": "Number of peers to create confs for. Required for server mode. Can also be a list of names: `myPC,myPhone,myTablet` (alphanumeric only)"
        },
        {
            "name": "PEERDNS",
            "label": "PEERDNS",
            "default": "auto",
            "description": "DNS server set in peer/client configs (can be set as `8.8.8.8`). Used in server mode. Defaults to `auto`, which uses wireguard docker host's DNS via included CoreDNS forward."
        },
        {
            "name": "INTERNAL_SUBNET",
            "label": "INTERNAL_SUBNET",
            "default": "10.13.13.0",
            "description": "Internal subnet for the wireguard and server and peers (only change if it clashes). Used in server mode."
        },
        {
            "name": "ALLOWEDIPS",
            "label": "ALLOWEDIPS",
            "default": "0.0.0.0/0",
            "description": "The IPs/Ranges that the peers will be able to reach using the VPN connection. If not specified the default value is: '0.0.0.0/0, ::0/0' This will cause ALL traffic to route through the VPN, if you want split tunneling, set this to only the IPs you would like to use the tunnel AND the ip of the server's WG ip, such as 10.13.13.1."
        }
    ],
    "ports": [
        "51820:51820/udp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/wireguard/config"
    },
    {
        "container": "/lib/modules",
        "bind": "/lib/modules"
    }
    ],
    "restart_policy": "unless-stopped"
},
{
    "categories": ["Utilities"],
    "type": 1,
    "title": "Wireshark",
    "name": "Wireshark",
    "note": "Portainer App Templates by <a href='https://www.technorabilia.com' target='_blank'>Technorabilia</a> based on data provided by <a href='https://www.linuxserver.io' target='_blank'>LinuxServer.io</a>.</p><p>Don't forget to create the volume directories on the host file system.</p><p>mkdir -p /volume1/docker/wireshark/config</p>",
    "description": "[Wireshark](https://www.wireshark.org/) is the world’s foremost and widely-used network protocol analyzer. It lets you see what’s happening on your network at a microscopic level and is the de facto (and often de jure) standard across many commercial and non-profit enterprises, government agencies, and educational institutions. Wireshark development thrives thanks to the volunteer contributions of networking experts around the globe and is the continuation of a project started by Gerald Combs in 1998.",
    "platform": "linux",
    "logo": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/wireshark-icon.png",
    "image": "linuxserver/wireshark:latest",
    "network": "host",
    "env": [
        {
            "name": "PUID",
            "label": "PUID",
            "default": "1024",
            "description": "for GroupID"
        },
        {
            "name": "PGID",
            "label": "PGID",
            "default": "100",
            "description": "for UserID"
        },
        {
            "name": "TZ",
            "label": "TZ",
            "default": "Europe/Amsterdam",
            "description": "Specify a timezone to use for example Europe/Amsterdam"
        }
    ],
    "ports": [
        "3000:3000/tcp"
    ],
    "volumes": [
    {
        "container": "/config",
        "bind": "/volume1/docker/wireshark/config"
    }
    ],
    "restart_policy": "unless-stopped"
},

    {
      "categories": ["Downloaders"],
      "description": "YoutubeDL-Material is a Material Design frontend for youtube-dl. It's coded using Angular 9 for the frontend, and Node.js on the backend.",
      "image": "tzahi12345/youtubedl-material:latest",
      "logo": "https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Images/ytdlm.png",
      "name": "youtubedl-material",
      "platform": "linux",
      "ports": ["17442:17442/tcp"],
      "restart_policy": "unless-stopped",
      "title": "YouTubeDL-Material",
      "type": 1,
      "volumes": [
        {
          "bind": "/portainer/Files/AppData/Config/YTDLM",
          "container": "/app/appdata"
        },
        {
          "bind": "/portainer/Files/AppData/Youtube/Video",
          "container": "/app/video"
        },
        {
          "bind": "/portainer/Files/AppData/Youtube/Subscriptions",
          "container": "/app/subscriptions"
        },
        {
          "bind": "/portainer/Files/AppData/Youtube/Users",
          "container": "/app/users"
        },
        {
          "bind": "/portainer/Files/AppData/Youtube/Audio",
          "container": "/app/audio"
        }
      ]
    }
  ]
}
